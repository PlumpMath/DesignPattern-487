package strategy2;

public class MergeSort implements Arrangement {

	int[] currentArray;

	@Override
	public int[] sort(int[] array) {
		// TODO Auto-generated method stub
		currentArray = array;

		// Chia máº£ng ban Ä‘áº§u thÃ nh cÃ¡c máº£ng con nhá»? hÆ¡n
		mergeSort(0, array.length - 1);

		return currentArray;
	}

	private void mergeSort(int i, int j) {
		// TODO Auto-generated method stub
		int left = i, right = j;
		int mid = (left + right) / 2;

		// Náº¿u máº£ng chá»‰ cÃ²n 1 pháº§n tá»­ thÃ¬ khÃ´ng chia ná»¯a
		if (right - left < 1)
			return;
		else {

			// Chia máº£ng thÃ nh 2 máº£ng con nhá»? hÆ¡n
			//
			mergeSort(i, mid);
			mergeSort(mid + 1, j);

			// GhÃ©p 2 máº£ng ocn láº¡i theo thá»© tá»± tÄƒng dáº§n
			merge(i, j);
		}
	}

	private void merge(int i, int j) {
		// TODO Auto-generated method stub
		int mid = (i + j) / 2;
		int left = i, right = mid + 1;

		// Biáº¿n táº¡m Ä‘á»ƒ lÆ°u trá»¯
		int temp;

		// Náº¿u hai máº£ng ocn cÃ²n pháº§n tá»­ thÃ¬ tiáº¿p tá»¥c
		// sáº¯p xáº¿p
		while (left <= mid && right <= j) {

			// So sÃ¡nh hai giÃ¡ trá»‹ Ä‘áº§u tiÃªn cá»§a 2 máº£ng con
			// GiÃ¡ trá»‹ nÃ o lá»›n hÆ¡n thÃ¬ sáº¯p xáº¿p vÃ o Ä‘áº§u máº£ng
			// ban Ä‘áº§u
			if (currentArray[left] > currentArray[right]) {

				// LÆ°u giÃ¡ tá»‹ vÃ o biáº¿n táº¡m
				temp = currentArray[right];

				// Dá»‹ch máº£ng ban Ä‘áº§u lÃªn 1 Ä‘Æ¡n vá»‹
				for (int k = right; k > left; k--) {
					currentArray[k] = currentArray[k - 1];
				}
				// Vá»‹ trÃ­ Ä‘áº§u tiÃªn lÆ°u giÃ¡ trá»‹ tá»« biáº¿n táº¡m
				// Vá»‹ trÃ­ Ä‘áº§u tiÃªn Ä‘Ã£ Ä‘Æ°á»£c sáº¯p xáº¿p
				currentArray[left] = temp;

				// TÄƒng thÃªm 1 giÃ¡ trá»‹ rá»“i tiáº¿p tá»¥c so sÃ¡nh
				right++;
			}
			// TÄƒng thÃªm 1 giÃ¡ trá»‹ rá»“i tiáº¿p tá»¥c so sÃ¡nh
			left++;
		}

	}
}
